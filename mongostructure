Collections that need data

customer
developer
location
property
configs

Location - 

{
	"_id" : {
		"registrationId" : "1"
	},
	"rank" : 1,
	"name" : "mumbai",
	"primary" : true,
	"featured" : true
}


Developer - 
{
	"_id" : {
		"registrationId" : "100" 
	},
	"name" : "mahindra lifespaces",
	"address" : [
		{
			"type" : "HOME",
			"line1" : "ravet",
			"city" : "pune",
			"state" : "maharashtra",
			"postalCode" : "411035",
			"country" : "india"
		}
	],
	"featured" : true
}

Property - 
{
	"_id" : {
		"registrationId" : "200"
	},
	"name" : "ekadanta sankul",
	"description" : "Largest and only backward integrated real estate player in the country, a big name in the construction industry ...",
	"developerId" : {
		"registrationId" : "100"
	},
	"addresses" : [
		{
			"type" : "HOME",
			"line1" : "thane",
			"city" : "mumbai",
			"state" : "maharashtra",
			"postalCode" : "422035",
			"country" : "india"
		}
	],
	"featured" : true
}

Configs - 
{
	"configs" : [
		{
			"type" : "rowhouse",
			"sqft" : 2000,
			"quantity" : 10,
			"posession" : ISODate("2016-11-18T04:43:25.156Z"),
			"basePrice" : 6000000
		},
		{
			"type" : "1bhk",
			"sqft" : 800,
			"quantity" : 10,
			"posession" : ISODate("2016-11-18T04:43:25.156Z"),
			"basePrice" : 2000000
		},
		{
			"type" : "2bhk",
			"sqft" : 1200,
			"quantity" : 10,
			"posession" : ISODate("2016-11-18T04:43:25.156Z"),
			"basePrice" : 4000000
		},
		{
			"type" : "3bhk",
			"sqft" : 1600,
			"quantity" : 10,
			"posession" : ISODate("2016-11-18T04:43:25.156Z"),
			"basePrice" : 3000000
		}
	],
	"propertyId" : {
		"registrationId" : "200"
	}
}

Amenities - 
{
	"propertyId" : {
		"registrationId" : "200"
	},
	amenities: [
		{
			type: 'project',
			features: [
				{
					entity: 'landscapedGarden',
					specification: true
				},
				{
					entity: 'lift',
					specification: true
				}
			]

		},
		{
			type: 'flat',
			features: [
				{
					entity: 'window',
					specification: 'life size'
				}
			]

		},
		{
			type: 'floorings',
			features: [
				{
					entity: 'balcony',
					specification: 'standard'
				},
				{
					entity: 'kitchen',
					specification: 'vitrified tiles'
				},
				{
					entity: 'living',
					specification: 'vitrified tiles'
				},
				{
					entity: 'dinning',
					specification: 'vitrified tiles'
				},
				{
					entity: 'masterBedroom',
					specification: 'vitrified tiles'
				},
				{
					entity: 'otherBedroom',
					specification: 'vitrified tiles'
				},
				{
					entity: 'toilet',
					specification: 'anti skid tiles'
				}
			]

		},
		{
			type: 'fittings',
			features: [
				{
					entity: 'doors',
					specification: 'laminated'
				},
				{
					entity: 'electrical',
					specification: 'standard'
				},
				{
					entity: 'kitchen',
					specification: 'granite'
				},
				{
					entity: 'window',
					specification: 'powder coat'
				},
				{
					entity: 'toilet',
					specification: 'cp'
				},
				{
					entity: 'others',
					specification: 'standard'
				}
			]

		},
		{
			type: 'walls',
			features: [
				{
					entity: 'exterior',
					specification: 'weather shield'
				},
				{
					entity: 'interior',
					specification: 'obd'
				},
				{
					entity: 'kitchen',
					specification: 'standard'
				},
				{
					entity: 'toilet',
					specification: 'standard'
				}
			]

		}
	]
}




db.property.mapReduce(
  // Map function
  function() {

    // We need to save this in a local var as per scoping problems
    var document = this;

    // You need to expand this according to your needs
    var stopwords = ["the","this","and","or"];

    //for(var prop in document) {

      // We are only interested in strings and explicitly not in _id
      //if(prop === "_id" || (prop !== 'name' && prop !== 'addresses')) {
        //continue
      //}
      for (var i = 0; i < document.addresses.length; i++) {
          if (document.addresses[i].city) {
            document.addresses[i].city.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'property',
                name: document.name,
                propertyId: document._id})
              }
            )
          }
          if (document.addresses[i].state) {
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'property',
                name: document.name,
                propertyId: document._id})
              }
            )
          }
          if (document.addresses[i].line1) {
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'property',
                name: document.name,
                propertyId: document._id})
              }
            )
          }
          if (document.addresses[i].line2) {
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'property',
                name: document.name,
                propertyId: document._id})
              }
            )
          }
          if (document.addresses[i].line3) { 
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'property',
                name: document.name,
                propertyId: document._id})
              }
            )
          }
        }

      (document["name"]).split(" ").forEach(
        function(word){

          // You might want to adjust this to your needs
          var cleaned = word.replace(/[;,.]/g,"")

          if(
            // We neither want stopwords...
            stopwords.indexOf(cleaned) > -1 ||
            // ...nor string which would evaluate to numbers
            !(isNaN(parseInt(cleaned))) ||
            !(isNaN(parseFloat(cleaned)))
          ) {
            return
          }
          emit(cleaned,{
          type: 'property',
          name: document.name,
          propertyId: document._id})
        }
      ) 
    //}
  },
  // Reduce function
  function(k,v){

    // Kind of ugly, but works.
    // Improvements more than welcome!
    var values = { 'documents': []};
    v.forEach(
      function(vs){
        if(values.documents.indexOf(vs)>-1){
          return
        }
        //print(vs)
        values.documents.push(vs)
      }
    )
    return values
  },

  {
    // We need this for two reasons...
    finalize:

      function(key,reducedValue){

        // First, we ensure that each resulting document
        // has the documents field in order to unify access
        var finalValue = {documents:[]}

        // Second, we ensure that each document is unique in said field
        if(reducedValue.documents) {

          // We filter the existing documents array
          finalValue.documents = reducedValue.documents.filter(

            function(item,pos,self){

              // The default return value
              var loc = -1;

              for(var i=0;i<self.length;i++){
                // We have to do it this way since indexOf only works with primitives

                if(self[i].valueOf() === item.valueOf()){
                  // We have found the value of the current item...
                  loc = i;
                  //... so we are done for now
                  break
                }
              }

              // If the location we found equals the position of item, they are equal
              // If it isn't equal, we have a duplicate
              return loc === pos;
            }
          );
        } else {
          finalValue.documents.push(reducedValue)
        }
        // We have sanitized our data, now we can return it        
        return finalValue

      },
    // Our result are written to a collection called "words"
    out: "propertyWords"
  }
)






db.location.mapReduce(
  // Map function
  function() {

    // We need to save this in a local var as per scoping problems
    var document = this;

    // You need to expand this according to your needs
    var stopwords = ["the","this","and","or"]; 

      (document["name"]).split(" ").forEach(
        function(word){

          // You might want to adjust this to your needs
          var cleaned = word.replace(/[;,.]/g,"")

          if(
            // We neither want stopwords...
            stopwords.indexOf(cleaned) > -1 ||
            // ...nor string which would evaluate to numbers
            !(isNaN(parseInt(cleaned))) ||
            !(isNaN(parseFloat(cleaned)))
          ) {
            return
          }
          emit(cleaned,{
          type: 'location',
          name: document.name,
          locationId: document._id})
        }
      ) 
    //}
  },
  // Reduce function
  function(k,v){

    // Kind of ugly, but works.
    // Improvements more than welcome!
    var values = { 'documents': []};
    v.forEach(
      function(vs){
        if(values.documents.indexOf(vs)>-1){
          return
        }
        //print(vs)
        values.documents.push(vs)
      }
    )
    return values
  },

  {
    // We need this for two reasons...
    finalize:

      function(key,reducedValue){

        // First, we ensure that each resulting document
        // has the documents field in order to unify access
        var finalValue = {documents:[]}

        // Second, we ensure that each document is unique in said field
        if(reducedValue.documents) {

          // We filter the existing documents array
          finalValue.documents = reducedValue.documents.filter(

            function(item,pos,self){

              // The default return value
              var loc = -1;

              for(var i=0;i<self.length;i++){
                // We have to do it this way since indexOf only works with primitives

                if(self[i].valueOf() === item.valueOf()){
                  // We have found the value of the current item...
                  loc = i;
                  //... so we are done for now
                  break
                }
              }

              // If the location we found equals the position of item, they are equal
              // If it isn't equal, we have a duplicate
              return loc === pos;
            }
          );
        } else {
          finalValue.documents.push(reducedValue)
        }
        // We have sanitized our data, now we can return it        
        return finalValue

      },
    // Our result are written to a collection called "words"
    out: "locationWords"
  }
)












db.developer.mapReduce(
  // Map function
  function() {

    // We need to save this in a local var as per scoping problems
    var document = this;

    // You need to expand this according to your needs
    var stopwords = ["the","this","and","or"];

    //for(var prop in document) {

      // We are only interested in strings and explicitly not in _id
      //if(prop === "_id" || (prop !== 'name' && prop !== 'addresses')) {
        //continue
      //}
      for (var i = 0; i < document.addresses.length; i++) {
          if (document.addresses[i].city) {
            document.addresses[i].city.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'developer',
                name: document.name,
                developerId: document._id})
              }
            )
          }
          if (document.addresses[i].state) {
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'developer',
                name: document.name,
                developerId: document._id})
              }
            )
          }
          if (document.addresses[i].line1) {
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'developer',
                name: document.name,
                developerId: document._id})
              }
            )
          }
          if (document.addresses[i].line2) {
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'developer',
                name: document.name,
                developerId: document._id})
              }
            )
          }
          if (document.addresses[i].line3) { 
            document.addresses[i].state.split(" ").forEach(
              function(word){

                // You might want to adjust this to your needs
                var cleaned = word.replace(/[;,.]/g,"")

                if(
                  // We neither want stopwords...
                  stopwords.indexOf(cleaned) > -1 ||
                  // ...nor string which would evaluate to numbers
                  !(isNaN(parseInt(cleaned))) ||
                  !(isNaN(parseFloat(cleaned))) || !cleaned
                ) {
                  return
                }
                emit(cleaned,{
                type: 'developer',
                name: document.name,
                developerId: document._id})
              }
            )
          }
        }

      (document["name"]).split(" ").forEach(
        function(word){

          // You might want to adjust this to your needs
          var cleaned = word.replace(/[;,.]/g,"")

          if(
            // We neither want stopwords...
            stopwords.indexOf(cleaned) > -1 ||
            // ...nor string which would evaluate to numbers
            !(isNaN(parseInt(cleaned))) ||
            !(isNaN(parseFloat(cleaned)))
          ) {
            return
          }
          emit(cleaned,{
          type: 'developer',
          name: document.name,
          developerId: document._id})
        }
      ) 
    //}
  },
  // Reduce function
  function(k,v){

    // Kind of ugly, but works.
    // Improvements more than welcome!
    var values = { 'documents': []};
    v.forEach(
      function(vs){
        if(values.documents.indexOf(vs)>-1){
          return
        }
        //print(vs)
        values.documents.push(vs)
      }
    )
    return values
  },

  {
    // We need this for two reasons...
    finalize:

      function(key,reducedValue){

        // First, we ensure that each resulting document
        // has the documents field in order to unify access
        var finalValue = {documents:[]}

        // Second, we ensure that each document is unique in said field
        if(reducedValue.documents) {

          // We filter the existing documents array
          finalValue.documents = reducedValue.documents.filter(

            function(item,pos,self){

              // The default return value
              var loc = -1;

              for(var i=0;i<self.length;i++){
                // We have to do it this way since indexOf only works with primitives

                if(self[i].valueOf() === item.valueOf()){
                  // We have found the value of the current item...
                  loc = i;
                  //... so we are done for now
                  break
                }
              }

              // If the location we found equals the position of item, they are equal
              // If it isn't equal, we have a duplicate
              return loc === pos;
            }
          );
        } else {
          finalValue.documents.push(reducedValue)
        }
        // We have sanitized our data, now we can return it        
        return finalValue

      },
    // Our result are written to a collection called "words"
    out: "developerWords"
  }
)

db.location.insertMany([
{ "_id" : { "registrationId" : "1" }, "rank" : 1, "name" : "mumbai", "primary" : true, "featured" : true },
{ "_id" : { "registrationId" : "9" }, "rank" : 9, "name" : "pune", "primary" : true, "featured" : true},
{ "_id" : { "registrationId" : "3" }, "rank" : 3, "name" : "bangalore", "primary" : true, "featured" : true },
{ "_id" : { "registrationId" : "5" }, "rank" : 5, "name" : "hyderabad", "primary" : true, "featured" : true },
{ "_id" : { "registrationId" : "26" }, "rank" : 26, "name" : "nashik", "primary" : false },
{ "_id" : { "registrationId" : "2" }, "rank" : 2, "name" : "delhi", "primary" : false }])